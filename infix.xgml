<?xml version="1.0"?>
<!--
  Provides infix expressions.

  Example:
    $ ( 1 + 1 * 2 ) \ 3 - 2 $
    -1 eq
    $ 0 -> 1 , 0 $
    1 eq

  Precedence:
    ^
    * \
    + -
    = <> < <= > >=
    &
    |
    -> ,

  WARNING:
  All operators must have spaces around them.
  Only builtin functions may be used (bug in where operator).

  TODO:
    Index, slice, range operators.
-->
<Library name="infix-lib">
<item id="_depends" exec="0"><![CDATA[
"lib/switch.xgml"
]]></item>
<item id="$" exec="1"><![CDATA[
currentdict /infix-mode known not {
  dict begin
    /infix-mode 1 def
    /+  /add def
    /-  /sub def
    /*  /mul def
    /\  /div def
    /^  /pow def
    /=  /eq def
    /<> /ne def
    /<  /lt def
    /<= /le def
    />  /gt def
    />= /ge def
    /(  /( def
    /)  /) def
    /-> /ifelse def
    /,  /else def
    /&  /and def
    /|  /or def
    % End infix-mode marker.
    /$
} {
  end
  usereg
  [] !tokens
  {
    dup /$ eq { pop exit } if
    1 array ;tokens arrayappend !tokens
  } loop
  [] !output-queue
  { ;output-queue exch 1 array arrayappend !output-queue } !out-push
  [] !operator-stack
  { 1 array ;operator-stack arrayappend !operator-stack } !ops-push
  { ;operator-stack 0 get } !ops-peek
  { :ops-peek ;operator-stack dup 0 arrayremove !operator-stack } !ops-pop
  { ;operator-stack length 0 eq } !ops-empty

  % possible-op:Name -> 0 | 1
  {
    !op
    0
    ;op [
      /add    { pop 1 }
      /sub    { pop 1 }
      /mul    { pop 1 }
      /div    { pop 1 }
      /pow    { pop 1 }
      /eq     { pop 1 }
      /ne     { pop 1 }
      /lt     { pop 1 }
      /le     { pop 1 }
      /gt     { pop 1 }
      /ge     { pop 1 }
      /and    { pop 1 }
      /or     { pop 1 }
      /if     { pop 1 }
      /ifelse { pop 1 }
      /else   { pop 1 }
    ] switch
  } !is-op

  % Assuming ;token type /Name eq.
  {
    !token_
    ;token_ :is-op not ;token_ /( ne and ;token_ /) ne and
  } !is-function

  % Assuming ;op :is-op.
  % op:N -> precedence:I associativity:I
  {
    !op
    ;op [
      /add    { 5 0 }
      /sub    { 5 0 }
      /mul    { 6 0 }
      /div    { 6 0 }
      /pow    { 7 1 }
      /eq     { 4 0 }
      /ne     { 4 0 }
      /lt     { 4 0 }
      /le     { 4 0 }
      /gt     { 4 0 }
      /ge     { 4 0 }
      /and    { 3 0 }
      /or     { 2 0 }
      /if     { 0 0 }
      /ifelse { 0 0 }
      /else   { 1 0 }
    ] switch
  } !op-prec-assoc

  ;tokens {
    !token
    ;token type /Name eq {
        ;token [
          /( {
            ;token :ops-push
          } /) {
            {
              :ops-peek /( eq { :ops-pop pop exit } if
              :ops-pop :out-push
            } loop
            :ops-empty not {
              :ops-peek :is-function { :ops-pop :out-push } if
            } if
          } /else {
            % TODO: Consume an /if and put an /ifelse.
          } ;is-op {
            ;token :op-prec-assoc !o1-assoc !o1-prec
            {
              :ops-empty { exit } if
              :ops-peek :is-op not { exit } if
              :ops-peek :op-prec-assoc !o2-assoc !o2-prec
              % Left-associative
              :o1-assoc 0 eq {
                ;o1-prec ;o2-prec le {
                  :ops-pop :out-push
                } {
                  exit
                } ifelse
              } {
                ;o1-prec ;o2-prec lt {
                  :ops-pop :out-push
                } {
                  exit
                } ifelse
              } ifelse
            } loop
            ;token :ops-push
          } ;is-function {
            ;token :ops-push
          }
      ] switch
    } {
      ;token :out-push
    } ifelse
  } forall
  ;operator-stack { :out-push } forall

  ;output-queue {
    dup type /Name eq { cvx } if
  } map cvx exec
} ifelse
]]></item>
<item id="_test" exec="1"><![CDATA[
dict begin
"lib/package.xgml" dictfromxgml pop /initialize cvdictpath exec
"lib/debug.xgml" import

{ $ 1 $          1 eq }   assert
{ $ 1 + 1 $      2 eq }   assert
{ $ 2 - 1 $      1 eq }   assert
{ $ 2 * 3 $      6 eq }   assert
{ $ 2 * 3 + 1 $  7 eq }   assert
{ $ 5 \ 2 $      2 eq }   assert
{ $ 5.0 \ 2 $    2.5 eq } assert
{ $ 5 \ 2 + 1 $  3 eq }   assert
{ $ 2 ^ 3 $      8 eq }   assert
{ $ 1 + 2 ^ 3 $  9 eq }   assert
{ $ 2 * 2 ^ 3 $  16 eq }  assert

{ $ 1 = 1 $      1 eq }   assert
{ $ 1 = 0 $      0 eq }   assert
{ $ 1 + 1 = 2 $  1 eq }   assert
{ $ 1 <> 0 $     1 eq }   assert
{ $ 1 + 1 <> 2 $ 0 eq }   assert
{ $ 1 < 1 $      0 eq }   assert
{ $ 1 + 1 < 2 $  0 eq }   assert
{ $ 1 <= 1 $     1 eq }   assert
{ $ 1 + 2 <= 2 $ 0 eq }   assert
{ $ 1 > 1 $      0 eq }   assert
{ $ 1 + 1 > 0 $  1 eq }   assert
{ $ 1 >= 1 $     1 eq }   assert
{ $ 1 + 2 >= 2 $ 1 eq }   assert
{ $ 1 -> 0 , 2 $ 0 eq }   assert
{ $ 0 -> 1 , 2 $ 2 eq }   assert

% TODO: Why do we need brackets around the true but not false?
{ $ 1 -> ( 1 + 1 ) , 0 + 3 $ 2 eq } assert

{ $ 0 & 0 $      0 eq }   assert
{ $ 0 & 1 $      0 eq }   assert
{ $ 1 & 1 $      1 eq }   assert
{ $ 0 | 0 $      0 eq }   assert
{ $ 0 | 1 $      1 eq }   assert
{ $ 1 | 1 $      1 eq }   assert
{ $ ( 1 ) $      1 eq }   assert
{ $ 1 + ( 1 ) $  2 eq }   assert
{ $ ( 1 ) + 1 $  2 eq }   assert
{ $ /sin 30 $    0.5 eq } assert
{ $ /sin 30 + 60 $ 1 eq } assert

{ $ /neg ( 0 + 1 - 2 * 3 \ 4.0 ) $ 0.5 eq } assert
{ $ 1 = 0 | 1 & 2 -> 3 , 4 $ 3 eq } assert

end
]]></item>
</Library>